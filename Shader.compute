// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#define PI 3.14159265
// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
struct Agent
{
    float2 position;
    float angle;
};


RWStructuredBuffer<Agent> agents;
RWTexture2D<float4> Result;
int width;
int height;
float deltaTime;
float speed;


[numthreads(256, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    uint index = id.x;
    if (index >= agents.Length)
        return;

    Agent agent = agents[index];
    float2 dir = float2(cos(agent.angle), sin(agent.angle));

    // Apply motion with speed factor
    agent.position += dir * deltaTime * speed;

    // Bounce on edges
    if (agent.position.x < 0.0f || agent.position.x > 1.0f)
    {
        agent.angle = PI - agent.angle;
        agent.position.x = clamp(agent.position.x, 0.0f, 1.0f);
    }

    if (agent.position.y < 0.0f || agent.position.y > 1.0f)
    {
        agent.angle = -agent.angle;
        agent.position.y = clamp(agent.position.y, 0.0f, 1.0f);
    }

    agents[index] = agent;

    // Convert normalized pos to pixel coords
    int2 texPos = int2(agent.position.x * width, agent.position.y * height);
    texPos = clamp(texPos, int2(0, 0), int2(width - 1, height - 1));

    // Set pixel
    Result[texPos] = float4(1, 1, 1, 1);
}
