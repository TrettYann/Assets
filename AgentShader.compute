// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSAgent
#define PI 3.14159265
// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
struct Agent
{
    float2 position;
    float angle;
    int blockedSteps;
};

// PRNG
float Hash(float2 p)
{
    return frac(sin(dot(p, float2(12.9898, 78.233))) * 43758.5453);
}

RWStructuredBuffer<Agent> agents;
RWTexture2D<float4> Result;
Texture2D<float4> Source;
RWTexture2D<float4> OccupancyMap;
int width;
int height;
float deltaTime;
float speed;
int SensorOffset;
float rotationAngle;
bool isOscillatory;
float deltaAngle;

float Sense(int2 coord)
{
    float brightness = Source.Load(int3(coord, 0));
    return brightness;
}

[numthreads(256, 1, 1)]
void CSAgent(uint3 id : SV_DispatchThreadID)
{
    
    uint index = id.x;

    if (index >= agents.Length)
        return;

    Agent agent = agents[index];

    int2 coord = int2(agent.position * int2(width, height));

    int xcoord = int(agent.position.x * width);
    int ycoord = int(agent.position.y * height);
    
// Sense logic
    
    float2 front = float2(xcoord,ycoord) + SensorOffset * float2(cos(agent.angle), sin(agent.angle));
    float2 frontL = float2(xcoord,ycoord) + SensorOffset * float2(cos(agent.angle + PI / 8.0), sin(agent.angle + PI / 8.0));
    float2 frontR = float2(xcoord,ycoord) + SensorOffset * float2(cos(agent.angle - PI / 8.0), sin(agent.angle - PI / 8.0));

    // Round
    int2 FrontCoordinate = int2(round(front));
    int2 FrontLeftCoordinate = int2(round(frontL));
    int2 FrontRightCoordinate = int2(round(frontR));

    // Wrap
    FrontCoordinate = (FrontCoordinate + int2(width, height)) % int2(width, height);
    FrontLeftCoordinate = (FrontLeftCoordinate + int2(width, height)) % int2(width, height);
    FrontRightCoordinate = (FrontRightCoordinate + int2(width, height)) % int2(width, height);
    
    float FL = Sense(FrontLeftCoordinate);
    float FR = Sense(FrontRightCoordinate);
    float F = Sense(FrontCoordinate);
    
    if (F > FL && F > FR)
    {
        
    }
    else if (F < FL && F < FR)
    {
        if (FR > FL)
        {
            agent.angle -= rotationAngle * deltaTime;
        }
        else
        {
            agent.angle += rotationAngle * deltaTime;
        }

    }
    else if (FR < FL)
    {
        agent.angle += rotationAngle * deltaTime;
    }
    else if (FR > FL)
    {
        agent.angle -= rotationAngle * deltaTime;
    }
    
    float2 dir = float2(cos(agent.angle), sin(agent.angle));
    float surgeFactor = isOscillatory ? (1.0 + agent.blockedSteps) : 1.0;


    float2 next = agent.position + dir * deltaTime * speed * surgeFactor;
    next.x = fmod(next.x + 1.0f, 1.0f);
    next.y = fmod(next.y + 1.0f, 1.0f);
    // Convert calculated pos to rounded pixel coords
    int2 nextCoord = int2(round(next * float2(width, height)));
    // Wrap
    nextCoord = (nextCoord + int2(width, height)) % int2(width, height);
    nextCoord = clamp(nextCoord, int2(0, 0), int2(width - 1, height - 1));
    
    float4 occupied = OccupancyMap[nextCoord];
    bool canMove = (occupied < 0.5);
    
    if (canMove)
    {
        agent.position = next;
        agent.blockedSteps = 0;
        
        // Occupie Pixel
        OccupancyMap[nextCoord] = float4(1, 1, 1, 1);
        
        // Set pixel
        Result[nextCoord] = float4(1, 1, 1, 1);
    }
    else
    {
        if (isOscillatory)
        {
            agent.blockedSteps = min(agent.blockedSteps + 1, 3);
        }
        else
        {
            float angle = Hash(id.xy) * (2.0 * 3.14159265);
            agent.angle = angle;
            float2 rdir = float2(cos(agent.angle), sin(agent.angle));
            float2 acoord = agent.position + rdir * deltaTime * speed;
            Result[acoord] = float4(1, 1, 1, 1);
        }
        OccupancyMap[coord] = float4(1, 1, 1, 1);
    }

    

    


    agents[index] = agent;
    
    
}
